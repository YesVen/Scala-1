Reference from Scala Cookbook from alvinalexander

ReduceLeft allows us to walk through all of the elements in a Scala sequence, comparing two neighboring elements as you walk through.
the collection


scala> val a = Array(12, 6, 15, 2, 20, 9)
a: Array[Int] = Array(12, 6, 15, 2, 20, 9)

--Two syntax
scala> a.reduceLeft(_ + _)
res0: Int = 64

a.reduceLeft((x,y) => x + y)

scala> a.reduceLeft(_ * _)
res1: Int = 388800

scala> a.reduceLeft(_ min _)
res2: Int = 2

scala> a.reduceLeft(_ max _)
res3: Int = 20

/ returns the max of the two elements
val findMax = (x: Int, y: Int) => {
    val winner = x max y
    println(s"compared $x to $y, $winner was larger")
    winner
}

scala> a.reduceLeft(findMax)
compared 12 to 6, 12 was larger
compared 12 to 15, 15 was larger
compared 15 to 2, 15 was larger
compared 15 to 20, 20 was larger
compared 20 to 9, 20 was larger
res0: Int = 20

The code that reduceLeft uses under the hood looks like this:

// you provide the sequence 'seq' and the function 'f'
var result = seq(0)

for (i <- 1 until seq.length) {
    val next = seq(i)
    result = f(result, next)
}

